Repository Documentation
This document provides a comprehensive overview of the repository's structure and contents.
The first section, titled 'Directory/File Tree', displays the repository's hierarchy in a tree format.
In this section, directories and files are listed using tree branches to indicate their structure and relationships.
Following the tree representation, the 'File Content' section details the contents of each file in the repository.
Each file's content is introduced with a '[File Begins]' marker followed by the file's relative path,
and the content is displayed verbatim. The end of each file's content is marked with a '[File Ends]' marker.
This format ensures a clear and orderly presentation of both the structure and the detailed contents of the repository.

Directory/File Tree Begins -->

/
├── server.js
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── components
    │   ├── Banner.js
    │   ├── Contact.js
    │   ├── Footer.js
    │   ├── MailchimpForm.js
    │   ├── NavBar.js
    │   ├── Newsletter.js
    │   ├── ProjectCard.js
    │   ├── Projects.js
    │   └── Skills.js
    ├── index.css
    ├── index.js
    ├── reportWebVitals.js
    └── setupTests.js

<-- Directory/File Tree Ends

File Content Begin -->
[File Begins] server.js
const express = require("express");
const router = express.Router();
const cors = require("cors");
const nodemailer = require("nodemailer");

// server used to send send emails
const app = express();
app.use(cors());
app.use(express.json());
app.use("/", router);
app.listen(3000, () => console.log("Server Running"));
console.log(process.env.EMAIL_USER);
console.log(process.env.EMAIL_PASS);

const contactEmail = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: "meekunv2@gmail.com",
    pass: "ninjamiki123"
  },
});

contactEmail.verify((error) => {
  if (error) {
    console.log(error);
  } else {
    console.log("Ready to Send");
  }
});

router.post("/contact", (req, res) => {
  const name = req.body.firstName + req.body.lastName;
  const email = req.body.email;
  const message = req.body.message;
  const phone = req.body.phone;
  const mail = {
    from: name,
    to: "meekunv2@gmail.com",
    subject: "Contact Form Submission - Portfolio",
    html: `<p>Name: ${name}</p>
           <p>Email: ${email}</p>
           <p>Phone: ${phone}</p>
           <p>Message: ${message}</p>`,
  };
  contactEmail.sendMail(mail, (error) => {
    if (error) {
      res.json(error);
    } else {
      res.json({ code: 200, status: "Message Sent" });
    }
  });
});
[File Ends] server.js

  [File Begins] src/App.css
  /* Custom fonts */
  @font-face {
    font-family: Centra;
    src: url("./assets/font/CentraNo2-Bold.ttf");
    font-weight: 700;
    text-shadow: -0.5px -0.5px 0 #000, 0.5px -0.5px 0 #000, -0.5px 0.5px 0 #000, 0.5px 0.5px 0 #000;
  }
  @font-face {
    font-family: Centra;
    src: url("./assets/font/CentraNo2-Medium.ttf");
    font-weight: 500;
    text-shadow: -0.5px -0.5px 0 #000, 0.5px -0.5px 0 #000, -0.5px 0.5px 0 #000, 0.5px 0.5px 0 #000;
  }
  @font-face {
    font-family: Centra;
    src: url("./assets/font/CentraNo2-Book.ttf");
    font-weight: 400;
    text-shadow: -0.5px -0.5px 0 #000, 0.5px -0.5px 0 #000, -0.5px 0.5px 0 #000, 0.5px 0.5px 0 #000;
  }
  
  /* Default styles */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  html {
    scroll-behavior: smooth;
    scroll-padding-top: 75px;
  }
  
  body {
    font-weight: 400;
    overflow-x: hidden;
    position: relative;
    background-color: #121212 !important;
    color: #fff !important;
    font-family: "Centra", sans-serif !important;
    text-shadow: -0.5px -0.5px 0 #000, 0.5px -0.5px 0 #000, -0.5px 0.5px 0 #000, 0.5px 0.5px 0 #000;
  }
  
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0;
    padding: 0;
    line-height: normal;
  }
  .App {
    text-align: center;
  }
  
  .App-logo {
    height: 40vmin;
    pointer-events: none;
  }
  
  @media (prefers-reduced-motion: no-preference) {
    .App-logo {
      animation: App-logo-spin infinite 20s linear;
    }
  }
  
  .App-header {
    background-color: #282c34;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: calc(10px + 2vmin);
    color: white;
  }
  
  .App-link {
    color: #61dafb;
  }
  
  @keyframes App-logo-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  nav.navbar {
    padding: 18px 0;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 9999;
    transition:  0.32s ease-in-out;
  }
  nav.navbar.scrolled {
    padding: 0px 0;
    background-color: #121212;
  }
  nav.navbar a.navbar-brand {
      width: 9%;
  }
  nav.navbar .navbar-nav .nav-link.navbar-link {
    font-weight: 400;
    color: #fff !important;
    letter-spacing: 0.8px;
    padding: 0 25px;
    font-size: 18px;
    opacity: 0.75;
  }
  nav.navbar .navbar-nav a.nav-link.navbar-link:hover,
  nav.navbar .navbar-nav a.nav-link.navbar-link.active {
      opacity: 1;
  }
  span.navbar-text {
      display: flex;
      align-items: center;
  }
  .social-icon {
      display: inline-block;
      margin-left: 14px;
  }
  .social-icon a {
      width: 42px;
      height: 42px;
      background: rgba(217, 217, 217, 0.1);
      display: inline-flex;
      border-radius: 50%;
      margin-right: 6px;
      align-items: center;
      justify-content: center;
      line-height: 1;
      border: 1px solid rgba(255, 255, 255, 0.5);
  }
  .social-icon a::before {
      content: "";
      width: 42px;
      height: 42px;
      position: absolute;
      background-color: #ffffff;
      border-radius: 50%;
      transform: scale(0);
  	transition: 0.3s ease-in-out;
  }
  .social-icon a:hover::before {
      transform: scale(1);
  }
  .social-icon a img {
  	width: 40%;
  	z-index: 1;
  	transition: 0.3s ease-in-out;
  }
  .social-icon a:hover img {
  	filter: brightness(0) saturate(100%) invert(0%) sepia(7%) saturate(98%) hue-rotate(346deg) brightness(95%) contrast(86%);
  }
  .navbar-text button {
    font-weight: 700;
    color: #fff;
    border: 1px solid #fff;
    padding: 18px 34px;
    font-size: 18px;
    margin-left: 18px;
  	position: relative;
  	background-color: transparent;
  	transition: 0.3s ease-in-out;
  }
  .navbar-text button span {
    z-index: 1;
  }
  .navbar-text button::before {
    content: "";
    width: 0%;
    height: 100%;
    position: absolute;
    background-color: #fff;
    left: 0;
    top: 0;
    z-index: -1;
    transition: 0.3s ease-in-out;
  }
  .navbar-text button:hover {
    color: #121212;
  }
  .navbar-text button:hover::before {
  	content: "";
  	width: 100%;
  	height: 100%;
  	position: absolute;
  }
  nav.navbar .navbar-toggler:active,
  nav.navbar .navbar-toggler:focus {
  	outline: none;
      box-shadow: none;
  }
  nav.navbar .navbar-toggler-icon {
    width: 24px;
    height: 17px;
    background-image: none;
    position: relative;
    border-bottom: 2px solid #fff;
    transition: all 300ms linear;
    top: -2px;
  }
  nav.navbar .navbar-toggler-icon:focus {
  	border-bottom: 2px solid #fff;
  }
  nav.navbar .navbar-toggler-icon:after,
  nav.navbar .navbar-toggler-icon:before {
  	width: 24px;
  	position: absolute;
  	height: 2px;
  	background-color: #fff;
  	top: 0;
  	left: 0;
  	content: '';
  	z-index: 2;
  	transition: all 300ms linear;
  }
  nav.navbar .navbar-toggler-icon:after {
  	top: 8px;
  }
  nav.navbar .navbar-toggler[aria-expanded="true"] .navbar-toggler-icon:after {
  	transform: rotate(45deg);
  	background-color: #fff;
  	height: 2px;
  }
  nav.navbar .navbar-toggler[aria-expanded="true"] .navbar-toggler-icon:before {
  	transform: translateY(8px) rotate(-45deg);
  	background-color: #fff;
  	height: 2px;
  }
  nav.navbar .navbar-toggler[aria-expanded="true"] .navbar-toggler-icon {
  	border-color: transparent;
  }
  
  /************ Banner Css ************/
  .banner {
    margin-top: 0;
    padding: 260px 0 100px 0;
    background-image: url("./assets/img/bg-12.jpg");
    background-position: top center;
    background-size: cover;
    background-repeat: no-repeat;
  }
  .banner .tagline {
    font-weight: 700;
    letter-spacing: 0.8px;
    padding: 8px 10px;
    background: linear-gradient(
      90.21deg,
      rgba(238, 122, 14, 0.781) -5.91%,
      rgba(0, 0, 0, 0.5) 111.58%
    );
    border: 1px solid rgba(255, 255, 255, 0.5);
    font-size: 20px;
    margin-bottom: 16px;
    display: inline-block;
  }
  .banner h1 {
    font-size: 65px;
    font-weight: 700;
    letter-spacing: 0.8px;
    line-height: 1;
    margin-bottom: 20px;
    display: block;
  }
  .banner p {
    color: #b8b8b8;
    font-size: 18px;
    letter-spacing: 0.8px;
    line-height: 1.5em;
    width: 96%;
  }
  .banner button {
    color: #fff;
    background-color: #12121200;
    font-weight: 700;
    font-size: 20px;
    margin-top: 60px;
    letter-spacing: 0.8px;
    display: flex;
    align-items: center;
  }
  .banner button svg {
    font-size: 25px;
    margin-left: 10px;
    transition: 0.3s ease-in-out;
    line-height: 1;
  }
  .banner button:hover svg {
    margin-left: 25px;
  }
  .banner img {
    animation: updown 3s linear infinite;
  }
  @keyframes updown {
    0% {
      transform: translateY(-20px);
    }
    50% {
      transform: translateY(20px);
    }
    100% {
      transform: translateY(-20px);
    }
  }
  .txt-rotate > .wrap {
    border-right: 0.08em solid #666;
  }
  /************ Skills Css ************/
  .skill {
    padding: 0 0 50px 0;
    position: relative;
  }
  .skill-bx {
    background: #151515;
    border-radius: 64px;
    text-align: center;
    padding: 60px 50px;
    margin-top: -60px;
  }
  .skill h2 {
  	font-size: 45px;
  	font-weight: 700;
  }
  .skill p {
      color: #B8B8B8;
      font-size: 18px;
      letter-spacing: 0.8px;
      line-height: 1.5em;
      margin: 14px 0 75px 0;
  }
  .skill-slider {
    width: 80%;
    margin: 0 auto;
    position: relative;
  }
  .skill-slider .item img {
    width: 50%;
    margin: 0 auto 15px auto;
  }
  .background-image-left {
    top: 28%;
    position: absolute;
    bottom: 0;
    width: 40%;
    z-index: -4;
  }
  
  /************ Projects Css ************/
  .project {
    padding: 120px 0;
    position: relative;
    background-color: black;
  }
  .project h2 {
  	font-size: 45px;
  	font-weight: 700;
    text-align: center;
  }
  .project p {
    color: #B8B8B8;
    font-size: 18px;
    letter-spacing: 0.8px;
    line-height: 1.5em;
    margin: 14px auto 30px auto;
    text-align: center;
    width: 56%;
  }
  .project .nav.nav-pills {
    width: 72%;
    margin: 0 auto;
    border-radius: 50px;
    background-color: rgb(255 255 255 / 10%);
    overflow: hidden;
  }
  .project .nav.nav-pills .nav-item {
    width: 33.33333%;
  }
  .project .nav.nav-pills .nav-link {
    background-color: transparent;
    border-radius: 0;
    padding: 17px 0;
    color: #fff;
    width: 100%;
    font-size: 17px;
    letter-spacing: 0.8px;
    font-weight: 500;
    position: relative;
    transition: 0.3s ease-in-out;
    text-align: center;
    z-index: 0;
  }
  .project .nav.nav-pills .nav-link::before {
      content: "";
      position: absolute;
      width: 0;
      height: 100%;
      background: linear-gradient(90.21deg, #ffae00 -5.91%, #000000 111.58%);
      top: 0;
      left: 0;
      z-index: -1;
      transition: 0.3s ease-in-out;
  }
  .project .nav.nav-pills .nav-link.active::before {
      width: 100% !important;
  }
  .project .nav.nav-pills .nav-link.active {
      border: 1px solid rgba(255, 255, 255, 1);
  }
  .nav-link#projects-tabs-tab-first {
    border: 1px solid rgba(255, 255, 255, 0.5);
    border-radius: 55px 0px 0px 55px;
  }
  .nav-link#projects-tabs-tab-second {
    border-top: 1px solid rgba(255, 255, 255, 0.5);
    border-bottom: 1px solid rgba(255, 255, 255, 0.5);
  }
  .nav-link#projects-tabs-tab-third {
    border: 1px solid rgba(255, 255, 255, 0.5);
    border-radius: 0 55px 55px 0;
  }
  .proj-imgbx {
    position: relative;
    border-radius: 30px;
    overflow: hidden;
    margin-bottom: 24px;
  }
  .proj-imgbx::before {
    content: "";
    background: linear-gradient(90.21deg, #ffae00 -5.91%, #000000 111.58%);
    opacity: 0.85;
    position: absolute;
    width: 100%;
    height: 0;
    transition: 0.4s ease-in-out;
  }
  .proj-imgbx:hover::before {
    height: 100%;
  }
  .proj-txtx {
    position: absolute;
    text-align: center;
    top: 65%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: 0.5s ease-in-out;
    opacity: 0;
    width: 100%;
  }
  .proj-imgbx:hover .proj-txtx {
    top: 50%;
    opacity: 1;
  }
  .proj-txtx h4 {
    font-size: 30px;
    font-weight: 700;
    letter-spacing: 0.8px;
    line-height: 1.1em;
  }
  .proj-txtx span {
    font-style: italic;
    font-weight: 400;
    font-size: 15px;
    letter-spacing: 0.8px;
  }
  .background-image-right {
    top: 20%;
    position: absolute;
    bottom: 0;
    width: 35%;
    right: 0;
    z-index: -4;
  }
  
  /************ Projects Css ************/
  .contact {
    background: linear-gradient(90.21deg, #ffae00 -5.91%, #000000 111.58%);
    padding: 60px 0 200px 0;
  }
  .contact img {
    width: 92%;
  }
  .contact h2 {
  	font-size: 45px;
  	font-weight: 700;
    margin-bottom: 30px;
  }
  .contact form input, .contact form textarea {
    width: 100%;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.5);
    border-radius: 20px;
    color: #fff;
    margin: 0 0 8px 0;
    padding: 18px 26px;
    font-weight: 500;
    font-size: 18px;
    letter-spacing: 0.8px;
    transition: 0.3s ease-in-out;
  }
  .contact form input:focus, .contact form textarea:focus {
    background: rgba(255, 255, 255, 1);
    color: #121212;
  }
  .contact form input::placeholder, .contact form textarea::placeholder {
    font-size: 16px;
    font-weight: 400;
    color: #fff;
  }
  .contact form input:focus::placeholder, .contact form textarea:focus::placeholder {
    color: #121212;
    opacity: 0.8;
  }
  .contact form button {
    font-weight: 700;
    color: #000;
    background-color: #fff;
    padding: 14px 48px;
    font-size: 18px;
    margin-top: 25px;
    border-radius: 0;
    position: relative;
    transition: 0.3s ease-in-out;
  }
  .contact form button span {
    z-index: 1;
    position: relative;
  }
  .contact form button:hover {
    color: #fff;
  }
  .contact form button::before {
    content: "";
    background: #121212;
    width: 0;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    transition: 0.3s ease-in-out;
  }
  .contact form button:hover::before {
    width: 100%;
  }
  
  /************ Footer Css ************/
  .footer {
    padding: 0 0 50px 0;
   /*background-image: url('./assets/img/footer-bg.png');*/
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
  }
  .newsletter-bx {
    background: #FFFFFF;
    border-radius: 55px;
    color: #121212;
    padding: 85px 125px;
    margin-bottom: 80px;
    margin-top: -122px;
  }
  .newsletter-bx h3 {
    font-weight: 700;
    letter-spacing: 0.5px;
    line-height: 1.2em;
  }
  .new-email-bx {
    background: #fff;
    padding: 5px;
    border-radius: 20px;
    position: relative;
    z-index: 0;
    display: flex;
    align-items: center;
  }
  .new-email-bx::before {
    content: "";
    background: linear-gradient(90.21deg, #ffae00 -5.91%, #000000 111.58%);
    border-radius: 20px;
    position: absolute;
    z-index: -1;
    top: -1px;
    left: -1px;
    bottom: -1px;
    right: -1px;
  }
  .new-email-bx::after {
    content: "";
    background: #fff;
    border-radius: 20px;
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }
  .new-email-bx input {
    width: 100%;
    color: #121212;
    font-weight: 500;
    background: transparent;
    border: 0;
    padding: 0 15px;
  }
  .new-email-bx button {
    background: linear-gradient(90.21deg, #ffae00 -5.91%, #000000 111.58%);
    padding: 20px 65px;
    color: #fff;
    font-weight: 500;
    letter-spacing: 0.5px;
    border-radius: 18px;
  }
  .footer img {
    width: 26%;
  }
  .footer p {
    font-weight: 400;
    font-size: 14px;
    color: #B8B8B8;
    letter-spacing: 0.5px;
    margin-top: 20px;
  }
  

  [File Ends] src/App.css

  [File Begins] src/App.js
  
  import './App.css';
  import { NavBar } from './components/NavBar.js';
  import { Banner } from './components/Banner.js';
  import { Skills } from './components/Skills.js';
  import { Projects } from './components/Projects.js';
  import { Contact } from './components/Contact.js';
  import 'bootstrap/dist/css/bootstrap.min.css';
  import { Footer } from './components/Footer';
  
  
  function App() {
    return (
      <div className="App">
        <NavBar />
        <Banner />
        <Skills />
        <Projects />
        <Contact />
        <Footer />
      </div>
    );
  }
  
  export default App;

  [File Ends] src/App.js

  [File Begins] src/App.test.js
  import { render, screen } from '@testing-library/react';
  import App from './App';
  
  test('renders learn react link', () => {
    render(<App />);
    const linkElement = screen.getByText(/learn react/i);
    expect(linkElement).toBeInTheDocument();
  });

  [File Ends] src/App.test.js

    [File Begins] src/components/Banner.js
    import { useState, useEffect } from "react";
    
    import { Container, Row, Col} from "react-bootstrap";
    
    import { ArrowRightCircle} from "react-bootstrap-icons";
    import headerImg from "../assets/img/coder.svg";
    export const Banner = () => {
    
      const [loopNumber, setLoopNumber] = useState(0);
      const [isDeleting, setIsDeleting] = useState(false);
      const toRotate = [ "Software Developer", "GIS Technician", "Data Analyst" ];
      const [text, setText] = useState('');
      const [delta, setDelta] = useState(300 - Math.random() * 100);
      const period = 2000;
    
      useEffect(() => {
        let ticker = setInterval(() =>{
          tick();
        }, delta)
    
        return () => {clearInterval(ticker);}
      }, [text])
    
      const tick = () => {
        let i = loopNumber % toRotate.length;
        let fullText =toRotate[i];
        let updatedText = isDeleting ? fullText.substring(0, text.length -1) : fullText.substring(0, text.length + 1);
    
        setText(updatedText);
    
        if (isDeleting) {
          setDelta(prevDelta => prevDelta / 2)
        }
    
        if (!isDeleting && updatedText === fullText){
          setIsDeleting(true);
          setDelta(period);
    
        }else if(isDeleting && updatedText === ''){
          setIsDeleting(false);
          setLoopNumber(loopNumber + 1);
          setDelta(350);
        }
      }
      return(
        <section className="banner" id="home">
          <Container>
            <Row className="allign-items-center">
              <Col xs={12} md={6} xl={7}>
                <span className="tagline">Mihajlo Micic </span>
                <h1>{" "}<span classname ="wrap">{text}</span></h1>
                <p>Hello, I am Mihajlo, 4th year student at the University of Waterloo.
                  I am a software developer with a passion for GIS and data analysis, and this is my portfolio.<br></br><br></br>
                  <br></br><br></br>Winter 2024 Co-op Term: Software Developer @ Consalt Inc.<br></br>
                </p>
                {/* <button onClick={() => console.log('connect')}>Let’s Connect <ArrowRightCircle size={25} /></button> */}
              </Col>
              <Col xs={12} md={6} xl={5}>
                <img src={headerImg} alt="Header Image" />
              </Col>
            </Row>
          </Container>
        </section>
      )
    }
    [File Ends] src/components/Banner.js

    [File Begins] src/components/Contact.js
    import { useState } from "react";
    import { Container, Row, Col } from "react-bootstrap";
    import contactImg from "../assets/img/contact-img.svg";
    import "animate.css";
    import TrackVisibility from "react-on-screen";
    
    export const Contact = () => {
      const formInitialDetails = {
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        message: "",
      };
      const [formDetails, setFormDetails] = useState(formInitialDetails);
      const [buttonText, setButtonText] = useState("Send");
      const [status, setStatus] = useState({});
    
      const onFormUpdate = (category, value) => {
        setFormDetails({
          ...formDetails,
          [category]: value,
        });
      };
    
      const handleSubmit = async (e) => {
        e.preventDefault();
        setButtonText("Sending...");
        let response = await fetch("http://localhost:3000/contact", {
          method: "POST",
          headers: {
            "Content-Type": "application/json;charset=utf-8",
          },
          body: JSON.stringify(formDetails),
        });
        setButtonText("Send");
        let result = await response.json();
        setFormDetails(formInitialDetails);
        if (result.code == 200) {
          setStatus({ success: true, message: "Message sent successfully" });
        } else {
          setStatus({
            success: false,
            message: "Something went wrong, please try again later.",
          });
        }
      };
    
      return (
        <section className="contact" id="connect">
          <Container>
            <Row className="align-items-center">
              <Col size={12} md={6}>
                <TrackVisibility>
                  {({ isVisible }) => (
                    <img
                      className={
                        isVisible ? "animate__animated animate__zoomIn" : ""
                      }
                      src={contactImg}
                      alt="Contact Us"
                    />
                  )}
                </TrackVisibility>
              </Col>
              <Col size={12} md={6}>
                <TrackVisibility>
                  {({ isVisible }) => (
                    <div
                      className={
                        isVisible ? "animate__animated animate__fadeIn" : ""
                      }
                    >
                      <h2>Get In Touch - Test Phase</h2>
                      <form onSubmit={handleSubmit}>
                        <Row>
                          <Col size={12} sm={6} className="px-1">
                            <input
                              type="text"
                              value={formDetails.firstName}
                              placeholder="First Name"
                              onChange={(e) =>
                                onFormUpdate("firstName", e.target.value)
                              }
                            />
                          </Col>
                          <Col size={12} sm={6} className="px-1">
                            <input
                              type="text"
                              value={formDetails.lastName}
                              placeholder="Last Name"
                              onChange={(e) =>
                                onFormUpdate("lastName", e.target.value)
                              }
                            />
                          </Col>
                          <Col size={12} sm={6} className="px-1">
                            <input
                              type="email"
                              value={formDetails.email}
                              placeholder="Email Address"
                              onChange={(e) =>
                                onFormUpdate("email", e.target.value)
                              }
                            />
                          </Col>
                          <Col size={12} sm={6} className="px-1">
                            <input
                              type="tel"
                              value={formDetails.phone}
                              placeholder="Phone No."
                              onChange={(e) =>
                                onFormUpdate("phone", e.target.value)
                              }
                            />
                          </Col>
                          <Col size={12} className="px-1">
                            <textarea
                              rows="6"
                              value={formDetails.message}
                              placeholder="Message"
                              onChange={(e) =>
                                onFormUpdate("message", e.target.value)
                              }
                            ></textarea>
                            <button type="submit">
                              <span>{buttonText}</span>
                            </button>
                          </Col>
                          {status.message && (
                            <Col>
                              <p
                                className={
                                  status.success === false ? "danger" : "success"
                                }
                              >
                                {status.message}
                              </p>
                            </Col>
                          )}
                        </Row>
                      </form>
                    </div>
                  )}
                </TrackVisibility>
              </Col>
            </Row>
          </Container>
        </section>
      );
    };

    [File Ends] src/components/Contact.js

    [File Begins] src/components/Footer.js
    import { Container, Row, Col } from "react-bootstrap";
    import { MailchimpForm } from "./MailchimpForm";
    import logo from "../assets/img/mm-logo.png";
    import navIcon1 from "../assets/img/nav-icon1.svg";
    import navIcon2 from "../assets/img/nav-icon2.svg";
    import navIcon3 from "../assets/img/nav-icon3.svg";
    
    export const Footer = () => {
      return (
        <footer className="footer">
          <Container>
            <Row className="align-items-center">
              <MailchimpForm />
              <Col size={12} sm={6}>
                <img src={logo} alt="Logo" />
              </Col>
              <Col size={12} sm={6} className="text-center text-sm-end">
                <div className="social-icon">
                  <a href="#"><img src={navIcon1} alt="Icon" /></a>
                  {/* <a href="#"><img src={navIcon2} alt="Icon" /></a>
                  <a href="#"><img src={navIcon3} alt="Icon" /></a> */}
                </div>
                <p>Copyright Mihajlo Micic 2022. All Rights Reserved</p>
              </Col>
            </Row>
          </Container>
        </footer>
      )
    }
    [File Ends] src/components/Footer.js

    [File Begins] src/components/MailchimpForm.js
    import MailchimpSubscribe from "react-mailchimp-subscribe";
    import { Newsletter } from "./Newsletter";
    
    export const MailchimpForm = () => {
      const postUrl = `${process.env.REACT_APP_MAILCHIMP_URL}?u=${process.env.REACT_APP_MAILCHIMP_U}&id=${process.env.REACT_APP_MAILCHIMP_ID}`;
    
      return (
        <>
          <MailchimpSubscribe
            url={postUrl}
            render={({ subscribe, status, message }) => (
              <Newsletter
                status={status}
                message={message}
                onValidated={formData => subscribe(formData)}
                />
            )}
            />
        </>
      )
    }
    [File Ends] src/components/MailchimpForm.js

    [File Begins] src/components/NavBar.js
    import { useState, useEffect } from "react";
    import Container from "react-bootstrap/Container";
    import Nav from "react-bootstrap/Nav";
    import Navbar from "react-bootstrap/Navbar";
    import NavDropdown from "react-bootstrap/NavDropdown";
    
    import logo from "../assets/img/mm-logo.png";
    import navIcon1 from "../assets/img/nav-icon1.svg";
    import navIcon2 from "../assets/img/nav-icon2.svg";
    import navIcon3 from "../assets/img/nav-icon3.svg";
    
    import { HashLink } from 'react-router-hash-link';
    import {
      BrowserRouter as Router
    } from "react-router-dom";
    
    export const NavBar = () => {
      const openInNewTab = url => {
        window.open(url, '_blank', 'noopener,noreferrer');
      };
    
      const [activeLink, setActiveLink] = useState('home');
      const [scrolled, setScrolled] = useState(false);
    
      useEffect(() => {
        const onScroll = () => {
          if (window.scrollY > 50) {
            setScrolled(true);
          } else {
            setScrolled(false);
          }
        }
    
        window.addEventListener("scroll", onScroll);
    
        return () => window.removeEventListener("scroll", onScroll);
      }, [])
    
      const onUpdateActiveLink = (value) => {
        setActiveLink(value);
      }
    
      return (
        <Router>
          <Navbar expand="md" className={scrolled ? "scrolled" : ""}>
            <Container>
              <Navbar.Brand href="#">
                <img src={logo} alt="Logo" width="100" height="100"/>
              </Navbar.Brand>
              <Navbar.Toggle aria-controls="basic-navbar-nav">
                <span className="navbar-toggler-icon"></span>
              </Navbar.Toggle>
              <Navbar.Collapse id="basic-navbar-nav">
                <Nav className="ms-auto">
                  <Nav.Link href="#home" className={activeLink === 'home' ? 'active navbar-link' : 'navbar-link'} onClick={() => onUpdateActiveLink('home')}>Home</Nav.Link>
                  <Nav.Link href="#skills" className={activeLink === 'skills' ? 'active navbar-link' : 'navbar-link'} onClick={() => onUpdateActiveLink('skills')}>Skills</Nav.Link>
                  <Nav.Link href="#projects" className={activeLink === 'projects' ? 'active navbar-link' : 'navbar-link'} onClick={() => onUpdateActiveLink('projects')}>Projects</Nav.Link>
                </Nav>
                <span className="navbar-text">
                  <div className="social-icon">
                    <a onClick={() => openInNewTab("https://www.linkedin.com/in/mihajlo-micic/")}><img src={navIcon1} alt="" /></a>
                    {/* <a href="#"><img src={navIcon2} alt="" /></a> */}
                    {/* <a href="#"><img src={navIcon3} alt="" /></a> */}
                  </div>
                  <HashLink to='#connect'>
                    <button className="vvd"><span>Let’s Connect</span></button>
                  </HashLink>
                </span>
              </Navbar.Collapse>
            </Container>
          </Navbar>
        </Router>
      )
    }
    [File Ends] src/components/NavBar.js

    [File Begins] src/components/Newsletter.js
    
    import { useState, useEffect } from "react";
    import { Col, Row, Alert } from "react-bootstrap";
    
    export const Newsletter = ({ status, message, onValidated }) => {
      const [email, setEmail] = useState('');
    
      useEffect(() => {
        if (status === 'success') clearFields();
      }, [status])
    
      const handleSubmit = (e) => {
        e.preventDefault();
        email &&
        email.indexOf("@") > -1 &&
        onValidated({
          EMAIL: email
        })
      }
    
      const clearFields = () => {
        setEmail('');
      }
    
      return (
          <Col lg={12}>
            <div className="newsletter-bx wow slideInUp">
              <Row>
                <Col lg={12} md={6} xl={5}>
                  <h3>Subscribe to my Newsletter<br></br>(Currently in Development Phase)</h3>
                  {status === 'sending' && <Alert>Sending...</Alert>}
                  {status === 'error' && <Alert variant="danger">{message}</Alert>}
                  {status === 'success' && <Alert variant="success">{message}</Alert>}
                </Col>
                <Col md={6} xl={7}>
                  <form onSubmit={handleSubmit}>
                    <div className="new-email-bx">
                      <input value={email} type="email" onChange={(e) => setEmail(e.target.value)} placeholder="Email Address" />
                      <button type="submit">Submit</button>
                    </div>
                  </form>
                </Col>
              </Row>
            </div>
          </Col>
      )
    }

    [File Ends] src/components/Newsletter.js

    [File Begins] src/components/ProjectCard.js
    import { useState, useEffect } from "react";
    import { Container, Row, Col } from "react-bootstrap";
    
    export const ProjectCard =({title, description, imgUrl}) => {
        return (
            <Col sm={6} md={4}>
                <div classname="proj-imgbx">
                    <img src={imgUrl} />
                    <div classname="proj-txtx">
                        <h4>{title}</h4>
                        <span>{description}</span>
                    </div>
                </div>
            </Col>
        )
    }
    [File Ends] src/components/ProjectCard.js

    [File Begins] src/components/Projects.js
    import { useState, useEffect } from "react";
    import { Container, Row, Col, Tab, Nav } from "react-bootstrap";
    import { ProjectCard } from "./ProjectCard.js";
    import colorSharp2 from "../assets/img/color-sharp2.png";
    import TrackVisibility from 'react-on-screen';
    import proimg from "../assets/img/proj-img.png";
    import unityProject1 from "../assets/img/unityProject1.png";
    import 'animate.css';
    
    export const Projects = () => {
      const projectsTab1 = [
        {
          title: "Heroic Showdown",
          description:
            "2D Turn-Based Role-Playing Game for 2 players that emulates the battle between “heroes” that are inspired by World of Warcraft classes. Built in Unity Game Engine using C#. This project made me further expand my knowledge about Object-Oriented Design as it was crucial for the development of the game. Character models and assets were constructed in Adobe Photoshop",
          imgUrl: unityProject1,
        },
        {
          title: "FIFA Ultimate Team Builder",
          description:
            "Program that generates the best FIFA 23 Ultimate Team squad within the proposed budget. Utilizing the genetic algorithm that is applied to the extensive dataset about player performances, I am able to find the best squads for my Ultimate Team",
          imgUrl: proimg,
        },
      
        {
          title: "Project 3",
          description:
            "Coming Soon.",
          imgUrl: proimg,
        },
      ];
      const projectsTab2 = [
        {
          title: "Project 4",
          description:
            "Coming Soon.",
          imgUrl: proimg,
        },
        {
          title: "Project 5",
          description:
            "Coming Soon.",
          imgUrl: proimg,
        },
        {
          title: "Project 6",
          description:
            "Coming Soon.",
          imgUrl: proimg,
        },
      ];
      return (
        <section className="project" id="projects">
          <Container>
            <Row>
              <Col size={12}>
                <TrackVisibility>
                  {({ isVisible }) =>
                  <div className={isVisible ? "animate__animated animate__fadeIn": ""}>
                    <h2>Projects</h2>
                    <p>Here you can see the list of some of the projects I have been working on. This tab is in progress and will be updated with more projects soon.</p>
                    <Tab.Container id="projects-tabs" defaultActiveKey="first">
                      <Nav variant="pills" className="nav-pills mb-5 justify-content-center align-items-center" id="pills-tab">
                        <Nav.Item>
                          <Nav.Link eventKey="first">Tab 1</Nav.Link>
                        </Nav.Item>
                        <Nav.Item>
                          <Nav.Link eventKey="second">Tab 2</Nav.Link>
                        </Nav.Item>
                        <Nav.Item>
                          <Nav.Link eventKey="third">Tab 3</Nav.Link>
                        </Nav.Item>
                      </Nav>
                      <Tab.Content id="slideInUp" className={isVisible ? "animate__animated animate__slideInUp" : ""}>
                        <Tab.Pane eventKey="first">
                          <Row>
                            {
                              projectsTab1.map((project, index) => {
                                return (
                                  <ProjectCard
                                    key={index}
                                    {...project}
                                    />
                                )
                              })
                            }
                          </Row>
                        </Tab.Pane>
                        <Tab.Pane eventKey="second">
                          <Row>
                            {
                              projectsTab2.map((project, index) => {
                                return (
                                  <ProjectCard
                                    key={index}
                                    {...project}
                                    />
                                )
                              })
                            }
                          </Row>
                        </Tab.Pane>
                        <Tab.Pane eventKey="third">
                          <p>Coming Soon.</p>
                        </Tab.Pane>
                      </Tab.Content>
                    </Tab.Container>
                  </div>}
                </TrackVisibility>
              </Col>
            </Row>
          </Container>
          <img className="background-image-right" src={colorSharp2}></img>
        </section>
      )
    };

    [File Ends] src/components/Projects.js

    [File Begins] src/components/Skills.js
    import meter1 from "../assets/img/meter1.png";
    import meter2 from "../assets/img/meter2.png";
    import meter3 from "../assets/img/meter3.png";
    import Carousel from 'react-multi-carousel';
    import 'react-multi-carousel/lib/styles.css';
    import arrow1 from "../assets/img/arrow1.svg";
    import arrow2 from "../assets/img/arrow2.svg";
    import colorSharp from "../assets/img/color-sharp.png"
    
    export const Skills = () => {
      const responsive = {
        superLargeDesktop: {
          
          breakpoint: { max: 4000, min: 3000 },
          items: 5
        },
        desktop: {
          breakpoint: { max: 3000, min: 1024 },
          items: 3
        },
        tablet: {
          breakpoint: { max: 1024, min: 464 },
          items: 2
        },
        mobile: {
          breakpoint: { max: 464, min: 0 },
          items: 1
        }
      };
    
      return (
        <section className="skill" id="skills">
            <div className="container">
                <div className="row">
                    <div className="col-12">
                        <div className="skill-bx wow zoomIn">
                            <h2>Skills</h2>
                            <p>List of my most proficient skills.<br></br> Meter icons will be customized soon.</p>
                            <Carousel responsive={responsive} infinite={true} className="owl-carousel owl-theme skill-slider">
                                <div className="item">
                                    <img src={meter2} alt="Image" />
                                    <h5>Web Development</h5>
                                </div>
                                <div className="item">
                                    <img src={meter3} alt="Image" />
                                    <h5>Data Analysis Tools</h5>
                                </div>
                                <div className="item">
                                    <img src={meter2} alt="Image" />
                                    <h5>Frontend Development</h5>
                                </div>                 
                                <div className="item">
                                    <img src={meter3} alt="Image" />
                                    <h5>Python</h5>
                                </div>
                                <div className="item">
                                    <img src={meter2} alt="Image" />
                                    <h5>ArcGIS Pro</h5>
                                </div>
                            </Carousel>
                        </div>
                    </div>
                </div>
            </div>
            <img className="background-image-left" src={colorSharp} alt="Image" />
        </section>
      )
    }
    [File Ends] src/components/Skills.js

  [File Begins] src/index.css
  body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
      monospace;
  }

  [File Ends] src/index.css

  [File Begins] src/index.js
  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import './index.css';
  import App from './App';
  import reportWebVitals from './reportWebVitals';
  
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
  
  // If you want to start measuring performance in your app, pass a function
  // to log results (for example: reportWebVitals(console.log))
  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
  reportWebVitals();

  [File Ends] src/index.js

  [File Begins] src/reportWebVitals.js
  const reportWebVitals = onPerfEntry => {
    if (onPerfEntry && onPerfEntry instanceof Function) {
      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
        getCLS(onPerfEntry);
        getFID(onPerfEntry);
        getFCP(onPerfEntry);
        getLCP(onPerfEntry);
        getTTFB(onPerfEntry);
      });
    }
  };
  
  export default reportWebVitals;

  [File Ends] src/reportWebVitals.js

  [File Begins] src/setupTests.js
  // jest-dom adds custom jest matchers for asserting on DOM nodes.
  // allows you to do things like:
  // expect(element).toHaveTextContent(/react/i)
  // learn more: https://github.com/testing-library/jest-dom
  import '@testing-library/jest-dom';

  [File Ends] src/setupTests.js


<-- File Content Ends

